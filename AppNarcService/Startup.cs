// Copyright (c) WinQuire. All Rights Reserved. Licensed under the MIT License. See LICENSE in the project root for license information.
// <auto-generated/>
namespace AppTrackerBackendService
{
    using AppNarcServer.Context;
    using AppNarcServer.Context.Administrator;
    using AppNarcServer.Context.Provider;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using MongoDB.Entities;
    using System;

    [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:Elements should be documented", Justification = "Autogenerated code.")]
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            this.Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddDefaultPolicy(
                    builder => builder.WithOrigins("*")
                    .AllowAnyHeader()
                    .AllowAnyOrigin()
                    .AllowAnyMethod());
            });

            services.AddScoped<IAppUsageProvider, AppUsageProviderMock>();
            services.AddScoped<IAppUsageAdministrator, AppUsageAdministrator>();

            services.AddControllers();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseCors();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            ConnectDB();
        }

        public void ConnectDB()
        {
            string database = Environment.GetEnvironmentVariable("Database");
            string databaseHost = Environment.GetEnvironmentVariable("DatabaseHost");
            int.TryParse(Environment.GetEnvironmentVariable("DatabasePort"), out int databasePort);
            new DB(database, databaseHost, databasePort);
        }
    }
}
